//WAP to convert a given Infix expression into its equivalent Prefix 
expression using stack.
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX 100

char stack[MAX];
int top = -1;

// Function to push an element onto the stack
void push(char item) {
    if (top >= MAX - 1) {
        printf("Stack Overflow\n");
        return;
    }
    stack[++top] = item;
}

// Function to pop an element from the stack
char pop() {
    if (top < 0) {
        printf("Stack Underflow\n");
        return '\0';
    }
    return stack[top--];
}

// Function to check precedence of operators
int precedence(char operator) {
    switch (operator) {
        case '+':
        case '-': return 1;
        case '*':
        case '/': return 2;
        case '^': return 3;
        default: return 0;
    }
}

// Function to check if a character is an operator
int isOperator(char ch) {
    return (ch == '+' || ch == '-' || ch == '*' || ch == '/' || ch == '^');
}

// Function to reverse a string
void reverseString(char* str) {
    int len = strlen(str);
    for (int i = 0; i < len / 2; i++) {
        char temp = str[i];
        str[i] = str[len - i - 1];
        str[len - i - 1] = temp;
    }
}

// Function to convert infix to prefix
void infixToPrefix(char* infix, char* prefix) {
    char reversed[MAX], tempPrefix[MAX];
    int i = 0, j = 0;

    // Reverse the infix expression
    strcpy(reversed, infix);
    reverseString(reversed);

    // Iterate over the reversed infix expression
    while (reversed[i] != '\0') {
        char ch = reversed[i];

        if (isalnum(ch)) {
            tempPrefix[j++] = ch; // Append operand to tempPrefix
        } else if (ch == ')') {
            push(ch); // Push ')' onto stack
        } else if (ch == '(') {
            // Pop until ')' is enco
